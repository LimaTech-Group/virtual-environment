// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha2

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/env/v1alpha2.VirtualEnvironment":       schema_pkg_apis_env_v1alpha1_VirtualEnvironment(ref),
		"./pkg/apis/env/v1alpha2.VirtualEnvironmentSpec":   schema_pkg_apis_env_v1alpha1_VirtualEnvironmentSpec(ref),
		"./pkg/apis/env/v1alpha2.VirtualEnvironmentStatus": schema_pkg_apis_env_v1alpha1_VirtualEnvironmentStatus(ref),
	}
}

func schema_pkg_apis_env_v1alpha1_VirtualEnvironment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualEnvironment is the Schema for the virtualenvironments API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/env/v1alpha2.VirtualEnvironmentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/env/v1alpha2.VirtualEnvironmentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/env/v1alpha2.VirtualEnvironmentSpec", "./pkg/apis/env/v1alpha2.VirtualEnvironmentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_env_v1alpha1_VirtualEnvironmentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualEnvironmentSpec defines the desired state of VirtualEnvironment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"envLabel": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod label to mark virtual environment name",
							Ref:         ref("./pkg/apis/env/v1alpha2.EnvLabelSpec"),
						},
					},
					"envHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Header to keep env name in trace",
							Ref:         ref("./pkg/apis/env/v1alpha2.EnvHeaderSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/env/v1alpha2.EnvHeaderSpec", "./pkg/apis/env/v1alpha2.EnvLabelSpec"},
	}
}

func schema_pkg_apis_env_v1alpha1_VirtualEnvironmentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualEnvironmentStatus defines the observed state of VirtualEnvironment",
				Type:        []string{"object"},
			},
		},
	}
}
